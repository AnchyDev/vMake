@using vMake.Database.Types
@using vMake.Extensions

<h3>Editing @Template.ItemTemplate.Name (@Template.ItemTemplate.Entry / @Template.ItemTemplate.Patch)</h3>

<div class="vmake-panel-h">
    <div class="editor-group-vertical" style="flex: 7">
        <div style="display: flex; flex-direction: row; gap: 0.5rem">
            <button @onclick="() => currentTab = ItemEditorTab.General" class="tab-button @(currentTab == ItemEditorTab.General ? "active" : "")">General</button>
            <button @onclick="() => currentTab = ItemEditorTab.Stats" class="tab-button @(currentTab == ItemEditorTab.Stats ? "active" : "")">Stats</button>
            <button @onclick="() => currentTab = ItemEditorTab.Spells" class="tab-button @(currentTab == ItemEditorTab.Spells ? "active" : "")">Spells</button>
            <button @onclick="() => currentTab = ItemEditorTab.Save" class="tab-button @(currentTab == ItemEditorTab.Save ? "active" : "")">Save</button>
        </div>
        <span class="alert-info">@Status</span>

        @if(currentTab == ItemEditorTab.General)
        {
            <div class="editor-group-horizontal">
                <label class="editor-group-item">
                    <span>
                        Name
                    </span>
                    <InputText @bind-Value="Template!.ItemTemplate.Name" class="vmake-input" />
                </label>
                <label class="editor-group-item">
                    <span>Description</span>
                    <InputText @bind-Value="Template!.ItemTemplate.Description" class="vmake-input" />
                </label>
                <label class="editor-group-item">
                    <span>Item Level</span>
                    <InputNumber @bind-Value="Template!.ItemTemplate.ItemLevel" class="vmake-input" />
                </label>
                <label class="editor-group-item">
                    <span>Required Level</span>
                    <InputNumber @bind-Value="Template!.ItemTemplate.RequiredLevel" class="vmake-input" />
                </label>
                <label class="editor-group-item">
                    <span>Bonding</span>
                    <InputSelect @bind-Value="Template!.ItemTemplate.Bonding" class="vmake-input">
                        <option checked="@(Template.ItemTemplate.Bonding == MangosItemBonding.None)"
                                value="@MangosItemBonding.None">
                            None
                        </option>
                        <option checked="@(Template.ItemTemplate.Bonding == MangosItemBonding.BindOnPickup)"
                                value="@MangosItemBonding.BindOnPickup">
                            Bind on Pickup
                        </option>
                        <option checked="@(Template.ItemTemplate.Bonding == MangosItemBonding.BindOnEquip)"
                                value="@MangosItemBonding.BindOnEquip">
                            Bind on Equip
                        </option>
                        <option checked="@(Template.ItemTemplate.Bonding == MangosItemBonding.BindOnUse)"
                                value="@MangosItemBonding.BindOnUse">
                            Bind on Use
                        </option>
                        <option checked="@(Template.ItemTemplate.Bonding == MangosItemBonding.Quest)"
                                value="@MangosItemBonding.Quest">
                            Quest Item
                        </option>
                    </InputSelect>
                </label>
                <label class="editor-group-item">
                    <span>Quality</span>
                    <InputSelect @bind-Value="Template!.ItemTemplate.Quality" class="vmake-input">
                        <option checked="@(Template.ItemTemplate.Quality == MangosItemQuality.Poor)"
                                value="@MangosItemQuality.Poor">
                            Poor
                        </option>
                        <option checked="@(Template.ItemTemplate.Quality == MangosItemQuality.Common)"
                                value="@MangosItemQuality.Common">
                            Common
                        </option>
                        <option checked="@(Template.ItemTemplate.Quality == MangosItemQuality.Uncommon)"
                                value="@MangosItemQuality.Uncommon">
                            Uncommon
                        </option>
                        <option checked="@(Template.ItemTemplate.Quality == MangosItemQuality.Rare)"
                                value="@MangosItemQuality.Rare">
                            Rare
                        </option>
                        <option checked="@(Template.ItemTemplate.Quality == MangosItemQuality.Epic)"
                                value="@MangosItemQuality.Epic">
                            Epic
                        </option>
                        <option checked="@(Template.ItemTemplate.Quality == MangosItemQuality.Legendary)"
                                value="@MangosItemQuality.Legendary">
                            Legendary
                        </option>
                        <option checked="@(Template.ItemTemplate.Quality == MangosItemQuality.Artifact)"
                                value="@MangosItemQuality.Artifact">
                            Artifact
                        </option>
                    </InputSelect>
                </label>
            </div>
        }
        else if(currentTab == ItemEditorTab.Stats)
        {
            <label class="editor-group-item">
                <span>Armor</span>
                <InputNumber @bind-Value="Template!.ItemTemplate.Armor" class="vmake-input" />
            </label>

            <div class="editor-group-horizontal">
                <div class="editor-group-item">
                    <span style="align-self: center">Stat 1</span>
                    <ItemEditorStat StatType="Template.ItemTemplate.StatType1" StatValue="Template.ItemTemplate.StatValue1"
                                    OnValueChanged="value => Template.ItemTemplate.StatValue1 = value"
                                    OnTypeChanged="type => Template.ItemTemplate.StatType1 = type" />
                </div>

                <div class="editor-group-item">
                    <span style="align-self: center">Stat 2</span>
                    <ItemEditorStat StatType="Template.ItemTemplate.StatType2" StatValue="Template.ItemTemplate.StatValue2"
                                    OnValueChanged="value => Template.ItemTemplate.StatValue2 = value"
                                    OnTypeChanged="type => Template.ItemTemplate.StatType2 = type" />
                </div>

                <div class="editor-group-item">
                    <span style="align-self: center">Stat 3</span>
                    <ItemEditorStat StatType="Template.ItemTemplate.StatType3" StatValue="Template.ItemTemplate.StatValue3"
                                    OnValueChanged="value => Template.ItemTemplate.StatValue3 = value"
                                    OnTypeChanged="type => Template.ItemTemplate.StatType3 = type" />
                </div>

                <div class="editor-group-item">
                    <span style="align-self: center">Stat 4</span>
                    <ItemEditorStat StatType="Template.ItemTemplate.StatType4" StatValue="Template.ItemTemplate.StatValue4"
                                    OnValueChanged="value => Template.ItemTemplate.StatValue4 = value"
                                    OnTypeChanged="type => Template.ItemTemplate.StatType4 = type" />
                </div>

                <div class="editor-group-item">
                    <span style="align-self: center">Stat 5</span>
                    <ItemEditorStat StatType="Template.ItemTemplate.StatType5" StatValue="Template.ItemTemplate.StatValue5"
                                    OnValueChanged="value => Template.ItemTemplate.StatValue5 = value"
                                    OnTypeChanged="type => Template.ItemTemplate.StatType5 = type" />
                </div>

                <div class="editor-group-item">
                    <span style="align-self: center">Stat 6</span>
                    <ItemEditorStat StatType="Template.ItemTemplate.StatType6" StatValue="Template.ItemTemplate.StatValue6"
                                    OnValueChanged="value => Template.ItemTemplate.StatValue6 = value"
                                    OnTypeChanged="type => Template.ItemTemplate.StatType6 = type" />
                </div>

                <div class="editor-group-item">
                    <span style="align-self: center">Stat 7</span>
                    <ItemEditorStat StatType="Template.ItemTemplate.StatType7" StatValue="Template.ItemTemplate.StatValue7"
                                    OnValueChanged="value => Template.ItemTemplate.StatValue7 = value"
                                    OnTypeChanged="type => Template.ItemTemplate.StatType7 = type" />
                </div>

                <div class="editor-group-item">
                    <span style="align-self: center">Stat 8</span>
                    <ItemEditorStat StatType="Template.ItemTemplate.StatType8" StatValue="Template.ItemTemplate.StatValue8"
                                    OnValueChanged="value => Template.ItemTemplate.StatValue8 = value"
                                    OnTypeChanged="type => Template.ItemTemplate.StatType8 = type" />
                </div>

                <div class="editor-group-item">
                    <span style="align-self: center">Stat 9</span>
                    <ItemEditorStat StatType="Template.ItemTemplate.StatType9" StatValue="Template.ItemTemplate.StatValue9"
                                    OnValueChanged="value => Template.ItemTemplate.StatValue9 = value"
                                    OnTypeChanged="type => Template.ItemTemplate.StatType9 = type" />
                </div>

                <div class="editor-group-item">
                    <span style="align-self: center">Stat 10</span>
                    <ItemEditorStat StatType="Template.ItemTemplate.StatType10" StatValue="Template.ItemTemplate.StatValue10"
                                    OnValueChanged="value => Template.ItemTemplate.StatValue10 = value"
                                    OnTypeChanged="type => Template.ItemTemplate.StatType10 = type" />
                </div>
            </div>
        }
        else if(currentTab == ItemEditorTab.Spells)
        {
            <div class="editor-group-horizontal">
                <div class="editor-group-item">
                    <span style="align-self: center">Spell 1</span>
                    <ItemEditorSpell SpellEntry="Template.ItemTemplate.SpellId1" SpellTrigger="Template.ItemTemplate.SpellTrigger1"
                                     SpellEntryChanged="value => Template.ItemTemplate.SpellId1 = value"
                                     SpellTriggerChanged="type => Template.ItemTemplate.SpellTrigger1 = type" />
                </div>
                <div class="editor-group-item">
                    <span style="align-self: center">Spell 2</span>
                    <ItemEditorSpell SpellEntry="Template.ItemTemplate.SpellId2" SpellTrigger="Template.ItemTemplate.SpellTrigger2"
                                     SpellEntryChanged="value => Template.ItemTemplate.SpellId2 = value"
                                     SpellTriggerChanged="type => Template.ItemTemplate.SpellTrigger2 = type" />
                </div>
                <div class="editor-group-item">
                    <span style="align-self: center">Spell 3</span>
                    <ItemEditorSpell SpellEntry="Template.ItemTemplate.SpellId3" SpellTrigger="Template.ItemTemplate.SpellTrigger3"
                                     SpellEntryChanged="value => Template.ItemTemplate.SpellId3 = value"
                                     SpellTriggerChanged="type => Template.ItemTemplate.SpellTrigger3 = type" />
                </div>
                <div class="editor-group-item">
                    <span style="align-self: center">Spell 4</span>
                    <ItemEditorSpell SpellEntry="Template.ItemTemplate.SpellId4" SpellTrigger="Template.ItemTemplate.SpellTrigger4"
                                     SpellEntryChanged="value => Template.ItemTemplate.SpellId4 = value"
                                     SpellTriggerChanged="type => Template.ItemTemplate.SpellTrigger4 = type" />
                </div>
                <div class="editor-group-item">
                    <span style="align-self: center">Spell 5</span>
                    <ItemEditorSpell SpellEntry="Template.ItemTemplate.SpellId5" SpellTrigger="Template.ItemTemplate.SpellTrigger5"
                                     SpellEntryChanged="value => Template.ItemTemplate.SpellId5 = value"
                                     SpellTriggerChanged="type => Template.ItemTemplate.SpellTrigger5 = type" />
                </div>
            </div>
        }
        else if(currentTab == ItemEditorTab.Save)
        {
            <div class="editor-group-item">
                <label style="display: flex; flex-direction: column">
                    <span>Export</span>
                    <InputText @bind-Value="Export" placeholder="Export string" class="vmake-input" />
                </label>
                <button @onclick="ExportTemplate" class="vmake-button-primary">Generate</button>
            </div>

            <div class="editor-group-item">
                <span style="font-weight: bold; align-self: center">or</span>
            </div>

            <div class="editor-group-item">
                <button @onclick="UpdateItemAsync" class="vmake-button-primary">Save to Database</button>
            </div>
        }

    </div>
    <div style="flex: 3">
        <ItemTooltip Template="Template" />
    </div>
</div>