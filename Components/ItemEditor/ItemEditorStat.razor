@using System.Diagnostics
@using vMake.Database.Types

@code {
    [Parameter]
    public int StatValue { get; set; }

    [Parameter]
    public MangosItemStatType StatType { get; set; }

    [Parameter]
    public EventCallback<int> OnValueChanged { get; set; }

    [Parameter]
    public EventCallback<MangosItemStatType> OnTypeChanged { get; set; }

    private void OnStatValueChanged(ChangeEventArgs e)
    {
        if (OnValueChanged.HasDelegate && 
            int.TryParse(e.Value as string, out int newValue))
        {
            OnValueChanged.InvokeAsync(newValue);
        }
    }

    private void OnStatTypeChanged(ChangeEventArgs e)
    {
        if(OnTypeChanged.HasDelegate && 
                Enum.TryParse(typeof(MangosItemStatType), e.Value as string, out object? newType))
        {
            OnTypeChanged.InvokeAsync((MangosItemStatType)newType);
        }
    }
}

<div class="editor-group-item">
    <label style="display: flex; flex-direction: column">
        <span>Type</span>
        <InputSelect @bind-Value="StatType" @oninput="OnStatTypeChanged" class="vmake-input">
            @{
                foreach (MangosItemStatType statType in Enum.GetValues(typeof(MangosItemStatType)))
                {
                    <option checked="@(StatType == statType)" value="@statType">
                        @statType.ToString()
                    </option>
                }
            }
        </InputSelect>
    </label>
    <label style="display: flex; flex-direction: column">
        <span>Value</span>
        <InputNumber @bind-Value="StatValue" @oninput="OnStatValueChanged" class="vmake-input" />
    </label>
</div>
