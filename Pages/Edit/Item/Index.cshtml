@page
@model vMake.Pages.Edit.Item.IndexModel
@using vMake.Extensions
@using vMake.Database.Types;
@{
    ViewData["Title"] = "Edit Item";

    var itemTemplate = this.Model.ItemTemplate;
}

@section Scripts {
    <script type="text/javascript">
        function getQualityColor(q) {
            switch(q) {
                case 0: return '9d9d9d';
                case 1: return 'ffffff';
                case 2: return '1eff00';
                case 3: return '0070dd';
                case 4: return 'a335ee';
                case 5: return 'ff8000';
                case 6: return 'e6cc80';
            }

            return '#ffffff';
        }

        // Update the tooltip when the form changes.
        $(document).ready(function () {
            $('#form-name').on('input', function () {
                $('#tooltip-name').text(`${$(this).val()}`);
            });

            $('#form-description').on('input', function () {
                let value = $(this).val();
                if (!value) {
                    $(`#tooltip-description`).hide();
                }
                else {
                    $(`#tooltip-description`).show();
                }

                $('#tooltip-description').text(`"${value}"`);
            });

            $('#form-quality').on('input', function () {
                let value = parseInt($(this).val());
                let color = getQualityColor(value);

                console.log(value);
                console.log(color);

                $('#tooltip-name').css('color', `#${color}`)
            });

            $('#form-bonding').on('input', function () {
                let value = $(this).val();

                if (value === "None") {
                    $(`#tooltip-bonding`).hide();
                }
                else {
                    $(`#tooltip-bonding`).show();
                }

                $('#tooltip-bonding').text(`${$(this).find('option:selected').text()}`);
            });

            $('#form-itemlevel').on('input', function () {
                $('#tooltip-itemlevel').text(`Item Level ${$(this).val()}`);
            });

            $('#form-reqlevel').on('input', function () {
                let value = $(this).val();
                console.log(value);
                if (!value || value === '0') {
                    $(`#tooltip-reqlevel`).hide();
                }
                else {
                    $(`#tooltip-reqlevel`).show();
                }

                $('#tooltip-reqlevel').text(`Requires Level ${value}`);
            });

            $('#form-armor').on('input', function () {
                let value = $(this).val();
                if (!value) {
                    $(`#tooltip-armor`).hide();
                }
                else {
                    $(`#tooltip-armor`).show();
                }

                $('#tooltip-armor').text(`${value} Armor`);
            });

            for (let i = 1; i < 11; i++) {
                $(`#form-stat-type-${i}`).on('input', function () {
                    let type = parseInt($(this).val());
                    if (type == 0) {
                        $(`#tooltip-stat-${i}`).hide();
                    }
                    else {
                        $(`#tooltip-stat-${i}`).show();
                    }

                    $(`#tooltip-stat-type-${i}`).text(`${$(this).find('option:selected').text()}`);
                });
            }

            for (let i = 1; i < 11; i++) {
                $(`#form-stat-value-${i}`).on('input', function () {
                    let value = parseInt($(this).val());
                    let sign = value > 0 ? '+' : '';

                    $(`#tooltip-stat-value-${i}`).text(`${sign}${value}`);
                });
            }

            for (let i = 1; i < 6; i++) {
                $(`#form-spell-trigger-${i}`).on('input', function () {
                    $(`#tooltip-spell-trigger-${i}`).text(`${$(this).find('option:selected').text()}:`);
                });
            }

            // Load the spell descriptions when an entry changes
            for (let i = 1; i < 6; i++) {
                $(`#form-spell-id-${i}`).on('input', function () {
                    let element = $(`#form-spell-id-${i}`);

                    let value = parseInt($(element).val());

                    $.get(`/api/spell/${value}`, function (data) {
                        $(`#tooltip-spell-desc-${i}`).text(data.spell.description);
                        console.log(data.spell.description);
                    });
                });
            }

            // Load the spell descriptions on page load
            for (let i = 1; i < 6; i++) {
                let element = $(`#form-spell-id-${i}`);

                let value = parseInt($(element).val());

                $.get(`/api/spell/${value}`, function (data) {
                    $(`#tooltip-spell-desc-${i}`).text(data.spell.description);
                    console.log(data.spell.description);
                }).fail(function (error) {
                    console.error('Error:', error); // Handle errors
                });
            }
        });
    </script>
}

@if (itemTemplate is null)
{
    <form method="get" class="vmake-form">
        <div class="vmake-form-item">
            <label class="vmake-form-item-label" for="Entry">Entry</label>
            <input class="vmake-input" type="text" name="Entry" pattern="[0-9]{1,5}" value="@(this.Model.Entry)" />
        </div>

        <div class="vmake-form-item">
            <label class="vmake-form-item-label" for="Patch">Patch</label>
            <input class="vmake-input" type="text" name="Patch" pattern="[0-9]{1,5}" value="@(this.Model.Patch)" />
        </div>

        <div class="vmake-form-item">
            <button class="vmake-button-primary" type="submit">Edit</button>
        </div>

        @if (this.Model.Error is not null)
        {
            <div class="vmake-form-item">
                <span class="vmake-alert-error">@this.Model.Error</span>
            </div>
        }
    </form>
}
else
{
    <div class="vmake-panel-h">
        <form method="post" class="vmake-form" style="flex: 7">
            <div class="vmake-form-item">
                <h2>Editing Item Entry @itemTemplate.Entry</h2>
            </div>

            <input type="hidden" asp-for="ItemTemplate!.Entry" value="@itemTemplate.Entry" />
            <input type="hidden" asp-for="ItemTemplate!.Patch" value="@itemTemplate.Patch" />

            <div class="vmake-form-item">
                <label class="vmake-form-item-label" asp-for="ItemTemplate!.Name">Name (Max 255 chars)</label>
                <input class="vmake-input" id="form-name" asp-for="ItemTemplate!.Name" type="text" value="@itemTemplate.Name" maxlength="255" />
            </div>

            <div class="vmake-form-item">
                <label class="vmake-form-item-label" asp-for="ItemTemplate!.Description">Description (Max 255 chars)</label>
                <input class="vmake-input" id="form-description" asp-for="ItemTemplate!.Description" type="text" value="@itemTemplate.Description" maxlength="255" />
            </div>

            <div class="vmake-form-item">
                <label class="vmake-form-item-label" asp-for="ItemTemplate!.Quality">Quality</label>
                <select class="vmake-select" id="form-quality" asp-for="ItemTemplate!.Quality">
                    @foreach (MangosItemQuality quality in Enum.GetValues(typeof(MangosItemQuality)))
                    {
                        if (itemTemplate.Quality == quality)
                        {
                            <option value="@((int)quality)" selected>@quality</option>
                        }
                        else
                        {
                            <option value="@((int)quality)">@quality</option>
                        }
                    }
                </select>
            </div>

            <div class="vmake-form-item">
                <label class="vmake-form-item-label" asp-for="ItemTemplate!.Bonding">Bonding</label>
                <select class="vmake-select" id="form-bonding" asp-for="ItemTemplate!.Bonding">
                    @foreach(MangosItemBonding bonding in Enum.GetValues(typeof(MangosItemBonding)))
                    {
                        if(itemTemplate.Bonding == bonding)
                        {
                            <option value="@bonding" selected>@bonding.GetBondingText()</option>
                        }
                        else
                        {
                            <option value="@bonding">@bonding.GetBondingText()</option>
                        }
                    }
                </select>
            </div>

            <div class="vmake-form-item">
                <label class="vmake-form-item-label" asp-for="ItemTemplate!.ItemLevel">Item Level (0-255)</label>
                <input class="vmake-input" id="form-itemlevel" asp-for="ItemTemplate!.ItemLevel" type="text" value="@itemTemplate.ItemLevel" pattern="[0-9]{1,3}" />
            </div>

            <div class="vmake-form-item">
                <label class="vmake-form-item-label" asp-for="ItemTemplate!.RequiredLevel">Required Level (0-255)</label>
                <input class="vmake-input" id="form-reqlevel" asp-for="ItemTemplate!.RequiredLevel" type="text" value="@itemTemplate.RequiredLevel" pattern="[0-9]{1,3}" />
            </div>

            <div class="vmake-form-item">
                <label class="vmake-form-item-label" asp-for="ItemTemplate!.Armor">Armor (-32768-32767)</label>
                <input class="vmake-input" id="form-armor" asp-for="ItemTemplate!.Armor" type="text" value="@itemTemplate.Armor" pattern="-?[0-9]{1,5}" />
            </div>

            <!-- STATS START -->

            <div class="vmake-form-item">
                <div class="vmake-form-item-label">Stats</div>
                <div class="vmake-form-item-group">
                    <div class="vmake-form-item-group-item">
                        <span style="align-self: center">Stat 1</span>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatType1">Type</label>
                        <select class="vmake-select" id="form-stat-type-1" asp-for="ItemTemplate!.StatType1">
                            @foreach (MangosItemStatType statType in Enum.GetValues(typeof(MangosItemStatType)))
                            {
                                if (itemTemplate.StatType1 == (int)statType)
                                {
                                    <option value="@((int)statType)" selected>@statType</option>
                                }
                                else
                                {
                                    <option value="@((int)statType)">@statType</option>
                                }
                            }
                        </select>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatValue1">Value (@(Int16.MinValue) / @(Int16.MaxValue))</label>
                        <input class="vmake-input" id="form-stat-value-1" asp-for="ItemTemplate!.StatValue1" type="text" pattern="-?[0-9]{1,5}" />
                    </div>

                    <div class="vmake-form-item-group-item">
                        <span style="align-self: center">Stat 2</span>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatType2">Type</label>
                        <select class="vmake-select" id="form-stat-type-2" asp-for="ItemTemplate!.StatType2">
                            @foreach (MangosItemStatType statType in Enum.GetValues(typeof(MangosItemStatType)))
                            {
                                if (itemTemplate.StatType2 == (int)statType)
                                {
                                    <option value="@((int)statType)" selected>@statType</option>
                                }
                                else
                                {
                                    <option value="@((int)statType)">@statType</option>
                                }
                            }
                        </select>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatValue2">Value (@(Int16.MinValue) / @(Int16.MaxValue))</label>
                        <input class="vmake-input" id="form-stat-value-2" asp-for="ItemTemplate!.StatValue2" type="text" pattern="-?[0-9]{1,5}" />
                    </div>

                    <div class="vmake-form-item-group-item">
                        <span style="align-self: center">Stat 3</span>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatType3">Type</label>
                        <select class="vmake-select" id="form-stat-type-3" asp-for="ItemTemplate!.StatType3">
                            @foreach (MangosItemStatType statType in Enum.GetValues(typeof(MangosItemStatType)))
                            {
                                if (itemTemplate.StatType3 == (int)statType)
                                {
                                    <option value="@((int)statType)" selected>@statType</option>
                                }
                                else
                                {
                                    <option value="@((int)statType)">@statType</option>
                                }
                            }
                        </select>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatValue3">Value (@(Int16.MinValue) / @(Int16.MaxValue))</label>
                        <input class="vmake-input" id="form-stat-value-3" asp-for="ItemTemplate!.StatValue3" type="text" pattern="-?[0-9]{1,5}" />
                    </div>

                    <div class="vmake-form-item-group-item">
                        <span style="align-self: center">Stat 4</span>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatType4">Type</label>
                        <select class="vmake-select" id="form-stat-type-4" asp-for="ItemTemplate!.StatType4">
                            @foreach (MangosItemStatType statType in Enum.GetValues(typeof(MangosItemStatType)))
                            {
                                if (itemTemplate.StatType4 == (int)statType)
                                {
                                    <option value="@((int)statType)" selected>@statType</option>
                                }
                                else
                                {
                                    <option value="@((int)statType)">@statType</option>
                                }
                            }
                        </select>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatValue4">Value (@(Int16.MinValue) / @(Int16.MaxValue))</label>
                        <input class="vmake-input" id="form-stat-value-4" asp-for="ItemTemplate!.StatValue4" type="text" pattern="-?[0-9]{1,5}" />
                    </div>

                    <div class="vmake-form-item-group-item">
                        <span style="align-self: center">Stat 5</span>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatType1">Type</label>
                        <select class="vmake-select" id="form-stat-type-5" asp-for="ItemTemplate!.StatType5">
                            @foreach (MangosItemStatType statType in Enum.GetValues(typeof(MangosItemStatType)))
                            {
                                if (itemTemplate.StatType5 == (int)statType)
                                {
                                    <option value="@((int)statType)" selected>@statType</option>
                                }
                                else
                                {
                                    <option value="@((int)statType)">@statType</option>
                                }
                            }
                        </select>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatValue5">Value (@(Int16.MinValue) / @(Int16.MaxValue))</label>
                        <input class="vmake-input" id="form-stat-value-5" asp-for="ItemTemplate!.StatValue5" type="text" pattern="-?[0-9]{1,5}" />
                    </div>

                    <div class="vmake-form-item-group-item">
                        <span style="align-self: center">Stat 6</span>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatType6">Type</label>
                        <select class="vmake-select" id="form-stat-type-6" asp-for="ItemTemplate!.StatType6">
                            @foreach (MangosItemStatType statType in Enum.GetValues(typeof(MangosItemStatType)))
                            {
                                if (itemTemplate.StatType6 == (int)statType)
                                {
                                    <option value="@((int)statType)" selected>@statType</option>
                                }
                                else
                                {
                                    <option value="@((int)statType)">@statType</option>
                                }
                            }
                        </select>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatValue1">Value (@(Int16.MinValue) / @(Int16.MaxValue))</label>
                        <input class="vmake-input" id="form-stat-value-6" asp-for="ItemTemplate!.StatValue6" type="text" pattern="-?[0-9]{1,5}" />
                    </div>

                    <div class="vmake-form-item-group-item">
                        <span style="align-self: center">Stat 7</span>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatType7">Type</label>
                        <select class="vmake-select" id="form-stat-type-7" asp-for="ItemTemplate!.StatType7">
                            @foreach (MangosItemStatType statType in Enum.GetValues(typeof(MangosItemStatType)))
                            {
                                if (itemTemplate.StatType7 == (int)statType)
                                {
                                    <option value="@((int)statType)" selected>@statType</option>
                                }
                                else
                                {
                                    <option value="@((int)statType)">@statType</option>
                                }
                            }
                        </select>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatValue7">Value (@(Int16.MinValue) / @(Int16.MaxValue))</label>
                        <input class="vmake-input" id="form-stat-value-7" asp-for="ItemTemplate!.StatValue7" type="text" pattern="-?[0-9]{1,5}" />
                    </div>

                    <div class="vmake-form-item-group-item">
                        <span style="align-self: center">Stat 8</span>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatType8">Type</label>
                        <select class="vmake-select" id="form-stat-type-8" asp-for="ItemTemplate!.StatType8">
                            @foreach (MangosItemStatType statType in Enum.GetValues(typeof(MangosItemStatType)))
                            {
                                if (itemTemplate.StatType8 == (int)statType)
                                {
                                    <option value="@((int)statType)" selected>@statType</option>
                                }
                                else
                                {
                                    <option value="@((int)statType)">@statType</option>
                                }
                            }
                        </select>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatValue1">Value (@(Int16.MinValue) / @(Int16.MaxValue))</label>
                        <input class="vmake-input" id="form-stat-value-8" asp-for="ItemTemplate!.StatValue8" type="text" pattern="-?[0-9]{1,5}" />
                    </div>

                    <div class="vmake-form-item-group-item">
                        <span style="align-self: center">Stat 9</span>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatType9">Type</label>
                        <select class="vmake-select" id="form-stat-type-9" asp-for="ItemTemplate!.StatType9">
                            @foreach (MangosItemStatType statType in Enum.GetValues(typeof(MangosItemStatType)))
                            {
                                if (itemTemplate.StatType9 == (int)statType)
                                {
                                    <option value="@((int)statType)" selected>@statType</option>
                                }
                                else
                                {
                                    <option value="@((int)statType)">@statType</option>
                                }
                            }
                        </select>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatValue1">Value (@(Int16.MinValue) / @(Int16.MaxValue))</label>
                        <input class="vmake-input" id="form-stat-value-9" asp-for="ItemTemplate!.StatValue9" type="text" pattern="-?[0-9]{1,5}" />
                    </div>

                    <div class="vmake-form-item-group-item">
                        <span style="align-self: center">Stat 10</span>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatType10">Type</label>
                        <select class="vmake-select" id="form-stat-type-10" asp-for="ItemTemplate!.StatType10">
                            @foreach (MangosItemStatType statType in Enum.GetValues(typeof(MangosItemStatType)))
                            {
                                if (itemTemplate.StatType1 == (int)statType)
                                {
                                    <option value="@((int)statType)" selected>@statType</option>
                                }
                                else
                                {
                                    <option value="@((int)statType)">@statType</option>
                                }
                            }
                        </select>
                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.StatValue10">Value (@(Int16.MinValue) / @(Int16.MaxValue))</label>
                        <input class="vmake-input" id="form-stat-value-10" asp-for="ItemTemplate!.StatValue10" type="text" pattern="-?[0-9]{1,5}" />
                    </div>
                </div>
            </div>


            <!-- STATS END -->

            <!-- SPELLS START -->

            <div class="vmake-form-item">
                <div class="vmake-form-item-label">Spells</div>
                <div class="vmake-form-item-group">
                    <div class="vmake-form-item-group-item">
                        <span style="align-self: center">Spell 1</span>

                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.SpellId1">Id (Max @(UInt32.MaxValue))</label>
                        <input class="vmake-input" id="form-spell-id-1" asp-for="ItemTemplate!.SpellId1" type="text" pattern="[0-9]{1,5}" />

                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.SpellTrigger1">Trigger</label>
                        <select class="vmake-select" id="form-spell-trigger-1" asp-for="ItemTemplate!.SpellTrigger1">
                            @foreach (MangosItemSpellTrigger spellTrigger in Enum.GetValues(typeof(MangosItemSpellTrigger)))
                            {
                                if (itemTemplate.SpellTrigger1 == spellTrigger)
                                {
                                    <option value="@((int)spellTrigger)" selected>@spellTrigger.GetTriggerText()</option>
                                }
                                else
                                {
                                    <option value="@((int)spellTrigger)">@spellTrigger.GetTriggerText()</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="vmake-form-item-group-item">
                        <span style="align-self: center">Spell 2</span>

                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.SpellId2">Id (Max @(UInt32.MaxValue))</label>
                        <input class="vmake-input" id="form-spell-id-2" asp-for="ItemTemplate!.SpellId2" type="text" pattern="[0-9]{1,5}" />

                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.SpellTrigger2">Trigger</label>
                        <select class="vmake-select" id="form-spell-trigger-2" asp-for="ItemTemplate!.SpellTrigger2">
                            @foreach (MangosItemSpellTrigger spellTrigger in Enum.GetValues(typeof(MangosItemSpellTrigger)))
                            {
                                if (itemTemplate.SpellTrigger2 == spellTrigger)
                                {
                                    <option value="@((int)spellTrigger)" selected>@spellTrigger.GetTriggerText()</option>
                                }
                                else
                                {
                                    <option value="@((int)spellTrigger)">@spellTrigger.GetTriggerText()</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="vmake-form-item-group-item">
                        <span style="align-self: center">Spell 3</span>

                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.SpellId3">Id (Max @(UInt32.MaxValue))</label>
                        <input class="vmake-input" id="form-spell-id-3" asp-for="ItemTemplate!.SpellId3" type="text" pattern="[0-9]{1,5}" />

                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.SpellTrigger3">Trigger</label>
                        <select class="vmake-select" id="form-spell-trigger-3" asp-for="ItemTemplate!.SpellTrigger3">
                            @foreach (MangosItemSpellTrigger spellTrigger in Enum.GetValues(typeof(MangosItemSpellTrigger)))
                            {
                                if (itemTemplate.SpellTrigger3 == spellTrigger)
                                {
                                    <option value="@((int)spellTrigger)" selected>@spellTrigger.GetTriggerText()</option>
                                }
                                else
                                {
                                    <option value="@((int)spellTrigger)">@spellTrigger.GetTriggerText()</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="vmake-form-item-group-item">
                        <span style="align-self: center">Spell 4</span>

                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.SpellId4">Id (Max @(UInt32.MaxValue))</label>
                        <input class="vmake-input" id="form-spell-id-4" asp-for="ItemTemplate!.SpellId4" type="text" pattern="[0-9]{1,5}" />

                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.SpellTrigger4">Trigger</label>
                        <select class="vmake-select" id="form-spell-trigger-4" asp-for="ItemTemplate!.SpellTrigger4">
                            @foreach (MangosItemSpellTrigger spellTrigger in Enum.GetValues(typeof(MangosItemSpellTrigger)))
                            {
                                if (itemTemplate.SpellTrigger4 == spellTrigger)
                                {
                                    <option value="@((int)spellTrigger)" selected>@spellTrigger.GetTriggerText()</option>
                                }
                                else
                                {
                                    <option value="@((int)spellTrigger)">@spellTrigger.GetTriggerText()</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="vmake-form-item-group-item">
                        <span style="align-self: center">Spell 5</span>

                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.SpellId5">Id (Max @(UInt32.MaxValue))</label>
                        <input class="vmake-input" id="form-spell-id-5" asp-for="ItemTemplate!.SpellId5" type="text" pattern="[0-9]{1,5}" />

                        <label class="vmake-form-item-label" asp-for="ItemTemplate!.SpellTrigger5">Trigger</label>
                        <select class="vmake-select" id="form-spell-trigger-5" asp-for="ItemTemplate!.SpellTrigger5">
                            @foreach (MangosItemSpellTrigger spellTrigger in Enum.GetValues(typeof(MangosItemSpellTrigger)))
                            {
                                if (itemTemplate.SpellTrigger5 == spellTrigger)
                                {
                                    <option value="@((int)spellTrigger)" selected>@spellTrigger.GetTriggerText()</option>
                                }
                                else
                                {
                                    <option value="@((int)spellTrigger)">@spellTrigger.GetTriggerText()</option>
                                }
                            }
                        </select>
                    </div>
                </div>
            </div>

            <!-- SPELLS END -->

            <div class="vmake-form-item">
                <button class="vmake-button-primary" type="submit">Update</button>
            </div>

            @if (this.Model.Error is not null)
            {
                <div class="vmake-form-item">
                    <span class="vmake-alert-error">@this.Model.Error</span>
                </div>
            }
        </form>

        <div style="flex: 2;">
            <h3>Tooltip</h3>
            <div class="vmake-tooltip" style="flex: 3">
                <span id="tooltip-name" style="color: #@(itemTemplate.Quality.GetHexColor())">@itemTemplate.Name</span>
                
                <span id="tooltip-itemlevel" style="color: #E3BF00">Item Level @itemTemplate.ItemLevel</span>

                <span id="tooltip-bonding" class="@(itemTemplate.Bonding == MangosItemBonding.None ? "hide" : "")">@itemTemplate.Bonding.GetBondingText()</span>

                <span id="tooltip-armor" class="@(itemTemplate.Armor < 1 ? "hide" : "")">@itemTemplate.Armor Armor</span>

                @{ 
                    var stats = itemTemplate.GetStats();

                    var index = 1;
                    foreach (var stat in stats)
                    {
                        <div id="tooltip-stat-@(index)" class="@(stat.Type == MangosItemStatType.None ? "hide" : "")">
                            <span id="tooltip-stat-value-@(index)">@(stat.Value > 0 ? "+" : "")@stat.Value</span>
                            <span id="tooltip-stat-type-@(index)">@stat.Type</span>
                        </div>

                        index++;
                    }
                }

                <span id="tooltip-reqlevel" class="@(itemTemplate.RequiredLevel < 1 ? "hide" : "")">Requires Level @itemTemplate.RequiredLevel</span>

                @{
                    var spells = itemTemplate.GetSpells();

                    index = 1;
                    foreach (var spell in spells)
                    {
                        <div id="tooltip-spell-@(index)" class="@(string.IsNullOrWhiteSpace(spell.Description) ? "hide" : "")" style="color: #00FF00">
                            <span id="tooltip-spell-trigger-@(index)">@spell.Trigger.GetTriggerText(): </span>
                            <span id="tooltip-spell-desc-@(index)">@spell.Description</span>
                        </div>

                        index++;
                    }
                }

                <span id="tooltip-description" style="color: #E1D474" class="@(string.IsNullOrWhiteSpace(itemTemplate.Description) ? "hide" : "")">"@itemTemplate.Description"</span>
            </div>
        </div>
    </div>
}